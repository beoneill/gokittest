// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flights/pkg/grpc/pb/flights.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HealthRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthRequest) Reset()         { *m = HealthRequest{} }
func (m *HealthRequest) String() string { return proto.CompactTextString(m) }
func (*HealthRequest) ProtoMessage()    {}
func (*HealthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2f343f18a1208b3, []int{0}
}

func (m *HealthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthRequest.Unmarshal(m, b)
}
func (m *HealthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthRequest.Marshal(b, m, deterministic)
}
func (m *HealthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthRequest.Merge(m, src)
}
func (m *HealthRequest) XXX_Size() int {
	return xxx_messageInfo_HealthRequest.Size(m)
}
func (m *HealthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthRequest proto.InternalMessageInfo

type HealthReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthReply) Reset()         { *m = HealthReply{} }
func (m *HealthReply) String() string { return proto.CompactTextString(m) }
func (*HealthReply) ProtoMessage()    {}
func (*HealthReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2f343f18a1208b3, []int{1}
}

func (m *HealthReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthReply.Unmarshal(m, b)
}
func (m *HealthReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthReply.Marshal(b, m, deterministic)
}
func (m *HealthReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthReply.Merge(m, src)
}
func (m *HealthReply) XXX_Size() int {
	return xxx_messageInfo_HealthReply.Size(m)
}
func (m *HealthReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthReply.DiscardUnknown(m)
}

var xxx_messageInfo_HealthReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*HealthRequest)(nil), "pb.HealthRequest")
	proto.RegisterType((*HealthReply)(nil), "pb.HealthReply")
}

func init() { proto.RegisterFile("flights/pkg/grpc/pb/flights.proto", fileDescriptor_c2f343f18a1208b3) }

var fileDescriptor_c2f343f18a1208b3 = []byte{
	// 117 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4c, 0xcb, 0xc9, 0x4c,
	0xcf, 0x28, 0x29, 0xd6, 0x2f, 0xc8, 0x4e, 0xd7, 0x4f, 0x2f, 0x2a, 0x48, 0xd6, 0x2f, 0x48, 0xd2,
	0x87, 0x8a, 0xe9, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x31, 0x15, 0x24, 0x29, 0xf1, 0x73, 0xf1,
	0x7a, 0xa4, 0x26, 0xe6, 0x94, 0x64, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x28, 0xf1, 0x72,
	0x71, 0xc3, 0x04, 0x0a, 0x72, 0x2a, 0x8d, 0xcc, 0xb9, 0xd8, 0xdd, 0x20, 0x9a, 0x84, 0x74, 0xb8,
	0xd8, 0x20, 0x32, 0x42, 0x82, 0x7a, 0x05, 0x49, 0x7a, 0x28, 0xda, 0xa4, 0xf8, 0x91, 0x85, 0x0a,
	0x72, 0x2a, 0x93, 0xd8, 0xc0, 0x76, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x4f, 0xdf, 0x50,
	0x59, 0x88, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FlightsClient is the client API for Flights service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlightsClient interface {
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthReply, error)
}

type flightsClient struct {
	cc *grpc.ClientConn
}

func NewFlightsClient(cc *grpc.ClientConn) FlightsClient {
	return &flightsClient{cc}
}

func (c *flightsClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthReply, error) {
	out := new(HealthReply)
	err := c.cc.Invoke(ctx, "/pb.Flights/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlightsServer is the server API for Flights service.
type FlightsServer interface {
	Health(context.Context, *HealthRequest) (*HealthReply, error)
}

func RegisterFlightsServer(s *grpc.Server, srv FlightsServer) {
	s.RegisterService(&_Flights_serviceDesc, srv)
}

func _Flights_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightsServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Flights/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightsServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Flights_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Flights",
	HandlerType: (*FlightsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _Flights_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flights/pkg/grpc/pb/flights.proto",
}
